# Copyright (c) 2021 Universität Tübingen, Germany
# Authors: Leon Kuchenbecker <leon.kuchenbecker@uni-tuebingen.de>,
#          Kersten Breuer <k.breuer@dkfz.de>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

openapi: 3.0.0
info:
  description: DataMeta
  version: 1.0.0
  title: DataMeta

servers:
  - url: /api

paths:

  /keys:
    post:
      summary: Create new API Key/Token
      description: Create new API Key/Token
      tags:
        - Authentication
      operationId: CreateApiKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTokenRequest"
        description: >-
          Credentials to use (optional when using cookie sessions)
          and a label for the ApiKey to be created.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSession"
        "401":
          description: Unauthorized
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ValidationError'
      security:
        - bearerAuth: []
        - cookieAuth: []
        - {}

  /users:
    post:
      summary: Register a New User
      description: >-
        Register a new user.
        The password will be set later, after
        an admin has approved the registration.
      tags:
        - Authentication
        - Users
      operationId: RegisterUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegRequest"
        description: >-
          Information required for registration.
          Please provide either a "newGroupName" or a "groupId"
          but not both:
          If you are the first member of your group to register,
          please provide a descriptive name of the new group 
          using the "newGroupName" property.
          If your group already exists, please refer to it using
          its "groupId" (not name).
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegRequest"
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ValidationError'
  
  /users/{id}/password:
    put:
      summary: Update a user's password
      description: Update a user's password. The user ID can be specified either as a UUID or as a site ID.
      tags:
        - Authentication
      operationId: SetUserPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordChange"
        description: Old and new password
      parameters:
        - name: id
          in: path
          description: User ID, either as UUID or as site ID. '0' for password reset token based access.
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
        - cookieAuth: []
        - {} # Unauthenticated access for use with reset token
      responses:
        "204":
          description: Password update successful
        "401":
          description: Unauthorized
        "403":
          description: The specified user does not exist or is not the same user as the authorized user.
        "404":
          description: Password reset token not found
        "410":
          description: Password reset token expired
        "400":
          $ref: '#/components/responses/ValidationError'
        "500":
          $ref: '#/components/responses/ValidationError'

  
  /metadatasets:
    post:
      summary: Create a New MetaDataSet
      description: >-
        Create a new MetaDataSet
      tags:
        - Metadata
      operationId: CreateMetaDataSet
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetaDataSet"
        description: >-
          Provide all properties for of one MetaDataSet.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetaDataSetResponse"
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ValidationError'

security:
  - bearerAuth: []
  - cookieAuth: []

components:

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
    cookieAuth:
      type: apiKey
      in: cookie
      name: datameta

  schemas:
    CreateTokenRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        label:
          type: string
        # email and password are
        # not required when using cookie-based
        # sessions from the front end
      required:
        - label
      additionalProperties: false

    UserSession:
      type: object
      properties:
        userId:
          type: string
        token:
          type: string
        label:
          type: string
        expiresAt:
          type: string
          nullable: true
      required:
        - userId
        - token
        - expiresAt
      additionalProperties: false

    PasswordChange:
      type: object
      properties:
        passwordChangeCredential:
          type: string
        newPassword:
          type: string
      required:
        - newPassword
        - passwordChangeCredential

    RegRequest:
      type: object
      properties:
        fullname:
          type: string
        email:
          type: string
        groupId:
          type: string
          nullable: True
        newGroupName:
          type: string
          nullable: True
      required:
        - fullname
        - email
        # either provide
        # groupId or newGroupName
      additionalProperties: false
    
    MetaDataSet:
      type: object
      properties:
        records:
          type: object
          additionalProperties: true
          # a free-form object,
          # any property is allowed
      required:
        - records
      additionalProperties: false
          
    MetaDataSetResponse:
      type: object
      properties:
        records:
          type: object
          additionalProperties: true
          # a free-form object,
          # any property is allowed
        metaDataSetId:
          type: string
        submissionId:
          type: string
          nullable: true
        groupId:
          type: string
        userId:
          type: string
      required:
        - records
      additionalProperties: false
        
    Error:
      type: object
      properties:
        exception:
          type: string
        message:
          type: string
        field:
          type: string
      required:
        - message
      additionalProperties: false

    ValidationErrorModel:
      type: array
      items:
        $ref: "#/components/schemas/Error"

  responses:
    ValidationError:
      description: Validation Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationErrorModel"
