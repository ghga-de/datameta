# Copyright 2021 Universität Tübingen, DKFZ and EMBL for the German Human Genome-Phenome Archive (GHGA)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

openapi: 3.0.0
info:
  description: DataMeta
  version: 0.23.0
  title: DataMeta

servers:
  - url: /api/v0

paths:

  /keys:
    post:
      summary: Create new API Key/Token
      description: Create new API Key/Token
      tags:
        - Authentication and Users
      operationId: CreateApiKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTokenRequest"
        description: >-
          Credentials to use (optional when using cookie sessions),
          a label for the ApiKey to be created and the date it expires.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSession"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []
        - cookieAuth: []
        - {}

  /keys/{id}:
    delete:
      summary: Delete ApiKey by label
      description: >-
        Delete ApiKey by label.
      tags:
        - Authentication and Users
      operationId: DeleteApiKey
      parameters:
        - name: id
          in: path
          description: ID (not label) of Apikey
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: The specified key does not exist.
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        '500':
          description: Internal Server Error

  /rpc/whoami:
    get:
      summary: "[Not RESTful]: Returns information about the authenticated user"
      description: >-
        Returns the ids, name, groupAdmin, siteAdmin,
        email and groupName attributes for the logged in user.
        [Attention this endpoint is not RESTful, the result should not be cached.]
      tags:
        - Remote Procedure Calls
      operationId: GetUserInformation
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        '401':
          description: Unauthorized
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        '500':
          description: Internal Server Error

  /rpc/delete-files:
    post:
      summary: Bulk-delete Staged Files
      description: >-
        Bulk-delete Staged Files.
      tags:
        - Remote Procedure Calls
      operationId: BulkDeleteStagedFiles
      requestBody:
        content:
          application/json:
           schema:
             $ref: "#/components/schemas/StagedFiles"
        description: >-
          Provide a list of staged files to be deleted.
      responses:
        '204':
          description: Deletion successful
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: File not found
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        '500':
          description: Internal Server Error

  /rpc/delete-metadatasets:
    post:
      summary: Bulk-delete Staged MetaDataSets
      description: >-
        Bulk-delete Staged MetaDataSets.
      tags:
        - Remote Procedure Calls
      operationId: BulkDeleteStagedMetaDataSets
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StagedMetaDataSets"
        description: >-
          Provide a list of staged MetaDataSets to be deleted.
      responses:
        '204':
          description: Deletion successful
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: File not found
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        '500':
          description: Internal Server Error


  /rpc/get-file-url/{id}:
    get:
      summary: "[Not RESTful]: Redirects to a temporary, pre-signed HTTP-URL for downloading a file."
      description: >-
        For the file with the given ID, this enpoint will redirect to a pre-signed HTTP URL for
        downloading the requested file. The pre-signed URL times out after a certain amount of
        time which can be configured with the "expires" query string.
        [Attention this endpoint is not RESTful, the result should not be cached.]
      tags:
        - Remote Procedure Calls
      operationId: GetFileUrl
      parameters:
        - name: id
          in: path
          description: ID of the file
          required: true
          schema:
            type: string
        - name: expires
          in: query
          description: Minutes until the pre-signed URL will expire, defaults to 1
          schema:
            type: integer
            default: 1
      responses:
        '307':
          description: Redirecting to the pre-signed URL of the file
          headers:
            location:
              description: Location to redirect to
              schema:
                type: string
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: The specified file does not exist.
        '500':
          description: Internal Server Error


  /users/{id}/keys:
    get:
      summary: All API keys for a user
      description: >-
        Get a list of all API keys for a user.
        Please note that you cannot retrieve
        the tokens themselves because they are
        stored in a hashed format in our database
        as only the respective user is allowed
        to know them.
      tags:
        - Authentication and Users
      operationId: GetUserApiKeys
      parameters:
        - name: id
          in: path
          description: ID of the User
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKeyList"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: The specified user does not exist.
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        '500':
          description: Internal Server Error

  /users/{id}/password:
    put:
      summary: Update a user's password
      description: Update a user's password. The user ID can be specified either as a UUID or as a site ID.
      tags:
        - Authentication and Users
      operationId: SetUserPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordChange"
        description: Old and new password
      parameters:
        - name: id
          in: path
          description: User ID, either as UUID or as site ID. '0' for password reset token based access.
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
        - cookieAuth: []
        - {} # Unauthenticated access for use with reset token
      responses:
        "204":
          description: Password update successful
        "401":
          description: Unauthorized
        "403":
          description: The specified user does not exist or is not the same user as the authorized user.
        "404":
          description: Password reset token not found
        "410":
          description: Password reset token expired
        "400":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "500":
          description: Internal Server Error

  /users/{id}:
    put:
      summary: Update a user's credentials and status
      description: Update a user's name, group, admin status and enabled status.
      tags:
        - Authentication and Users
      operationId: UserUpdateRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
        description: username, group, admin status and enabled status
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        "204":
          description: User update successful
        "401":
          description: Unauthorized
        "403":
          description: This user does not have the rights to perform this action.
        "404":
          description: The specified user does not exist.
        "400":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "500":
          description: Internal Server Error

  /metadata:
    get:
      summary: Get metadata definitions
      description: >-
        Get the metadata definitions that are configured for this site.
      tags:
        - Metadata
      operationId: GetMetaData
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetaDatumResponse'
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
    post:
      summary: Create a New MetaDatum
      description: >-
        Create a new MetaDatum. This is an administrative Endpoint that is not accessible for regular users.
      tags:
        - Metadata
      operationId: CreateMetaDatum
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetaDatum"
        description: >-
          Provide all properties for one MetaDatum.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetaDataResponse'
        "401":
          description: Unauthorized
        '403':
          description: Forbidden
        "404":
          description: The specified Service does not exist.
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        '500':
          description: Internal Server Error

  /metadata/{id}:
    put:
      summary: Update a MetaDatum
      description: Update a MetaDatum. This is an administrative Endpoint that is not accessible for regular users.
      tags:
        - Metadata
      operationId: UpdateMetaDatum
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetaDatum"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetaDataResponse'
        "401":
          description: Unauthorized
        "403":
          description: This user does not have the rights to perform this action.
        "404":
          description: The specified service does not exist.
        "400":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "500":
          description: Internal Server Error

  /metadatasets:
    post:
      summary: Create a New MetaDataSet
      description: >-
        Create a new MetaDataSet
      tags:
        - Metadata
      operationId: CreateMetaDataSet
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetaDataSet"
        description: >-
          Provide all properties for one MetaDataSet.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetaDataSetResponse"
        '401':
          description: Unauthorized
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        '500':
          description: Internal Server Error
    get:
      summary: Query metadatasets
      description: >-
        Query all metadatasets
      tags:
        - Metadata
      operationId: GetMetaDataSets
      parameters:
        - name: submittedAfter
          in: query
          description: ISO datetime string specifying an exclusive lower bound for the submission date of the returned metadatasets.
          schema:
            type: string
            format: date-time
        - name: submittedBefore
          in: query
          description: ISO datetime string specifying an exclusive upper bound for the submission date of the returned metadatasets.
          schema:
            type: string
            format: date-time
        - name: awaitingService
          in: query
          description: Identifier for a service. Restricts the result to metadatsets for which the specified service has not been executed yet.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MetaDataSetResponse"
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        '500':
          description: Internal Server Error

  /metadatasets/{id}:
    get:
      summary: Get Details for a MetaDataSet
      description: >-
        Get details for a metadataset.
      tags:
        - Metadata
      operationId: GetMetaDataSet
      parameters:
        - name: id
          in: path
          description: ID of the MetaDataSet
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetaDataSetResponse"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "404":
          description: The specified metadataset does not exist.
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Not-Submitted Metadataset
      description: >-
        Delete File. Please note:
        This is only allowed if the metadataset
        has not been part of a Submission, yet.
      tags:
        - Metadata
      operationId: DeleteMetadataSet
      parameters:
        - name: id
          in: path
          description: ID of the Metadataset
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deletion successful
        '401':
          description: Unauthorized
        '403':
          description: Either forbidden or the resource is not modifiable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "404":
          description: The specified metadataset does not exist.
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        '500':
          description: Internal Server Error

  /service-execution/{serviceId}/{metadatasetId}:
    post:
      summary: Endpoint to store the result of a service execution for a single metadataset
      description: >-
        This endpoint is used to report the result of a service execution in
        the form of metadatum key - value pairs for the service-related
        metadata and corresponding files if file metadata are involved.
      tags:
        - Metadata
      operationId: ServiceSetMetaDatum
      parameters:
        - name: serviceId
          in: path
          description: ID of the service
          required: true
          schema:
            type: string
        - name: metadatasetId
          in: path
          description: ID of the metadataset
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceExecution"
        description: >-
          The `records` attribute of the request body must describe the result
          of the service execution in form of key/value pairs corresponding to
          the metadata associated with the service. The `fileIds` list must
          contain all file IDs of files referenced in values of file metadata.
          It can be empty (`[]`) but not `null` or missing.
      responses:
        '200':
          description: Update successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetaDataSetResponse"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: The specified metadataset or service does not exist.
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        '500':
          description: Internal Server Error

  /files:
    post:
      summary: Create a New File
      description: >-
        Creates a new empty file object.
        Attention: this endpoint does not
        take the file content for upload.
        Instead, it will respond with a
        presigned URL which you can use to
        upload (PUT) your file content.
      tags:
        - Files
      operationId: CreateFile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FileAnnouncement"
        description: >-
          Provide essential properties of the file that
          shall be uploaded
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileUploadResponse"
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error

  /files/{id}:
    get:
      summary: Get Details for A File
      description: >-
        Get details for a file.
      tags:
        - Files
      operationId: GetFile
      parameters:
        - name: id
          in: path
          description: ID of the File
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileResponse"
        '401':
          description: Unauthorized
        '403':
          description: Either forbidden or the resource is not modifiable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        '404':
          description: File not found
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        '500':
          description: Internal Server Error
    put:
      summary: Update File Details
      description: >-
        Update details for a File.
        E.g. to indicate that the File content
        has been uploaded (set contentUploaded=true).
        Please note: this only works for Files that
        have not been submitted, yet. Other file
        attributes (checksum and name) can only be
        updated until contentUploaded has been set to
        'true'.
      tags:
        - Files
      operationId: UpdateFile
      parameters:
        - name: id
          in: path
          description: ID of the File
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FileUpdateRequest"
        description: >-
          Provide properties of the file that
          shall be updated.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileResponse"
        '401':
          description: Unauthorized
        '403':
          description: Either forbidden or the resource is not modifiable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        '404':
          description: File not found
        '409':
          description: Mismatch between uploaded data checksum and announced checksum
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Not-Submitted File
      description: >-
        Delete File. Please note:
        This is only allowed if the File
        has not been part of a Submission, yet.
      tags:
        - Files
      operationId: DeleteFile
      parameters:
        - name: id
          in: path
          description: ID of the File
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deletion successful
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: File not found
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        '500':
          description: Internal Server Error

  /submissions:
    post:
      summary: Create a New Submission
      description: >-
        Creates a new Submission.
        A submission consists of a list of
        metadatasets and a list of files.
      tags:
        - Submissions
      operationId: CreateSubmission
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmissionRequest"
        description: >-
          Provide a list of metadatasets and a list of files.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubmissionResponse"
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error

  /presubvalidation:
    post:
      summary: Pre-validate a submission
      description: >-
        Pre-validates a submission request without actually creating a
        submission.  A submission request consists of a list of metadatasets
        and a list of files.
      tags:
        - Submissions
      operationId: PrevalidateSubmission
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmissionRequest"
        description: >-
          Provide a list of metadatasets and a list of files.
      responses:
        '204':
          description: OK
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error

  /groups/{id}/submissions:
    get:
      summary: Get A List of All Submissions of A Group.
      description: >-
        Get a list of all submissions of a group.
      tags:
        - Submissions
        - Groups
      operationId: GetGroupSubmissions
      parameters:
        - name: id
          in: path
          description: ID of the group
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupSubmissions"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        "404":
          description: The specified group does not exist.
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        '500':
          description: Internal Server Error

  /groups/{id}:
    put:
      summary: Change the name of a group.
      description: >-
        Change the name of a group.
      tags:
        - Groups
      operationId: ChangeGroupName
      parameters:
        - name: id
          in: path
          description: ID of the group
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupUpdateRequest"
      responses:
        "204":
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        "404":
          description: The specified group does not exist.
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        '500':
          description: Internal Server Error

  /appsettings:
    get:
      summary: GET all AppSettings
      description: >-
        GET all AppSettings. This is an administrative Endpoint that is not accessible for regular users.
      tags:
        - Settings
      operationId: AppSettings
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AppSettingsResponse"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        '500':
          description: Internal Server Error
  
  /services:
    post:
      summary: Create a new service. 
      description: Create a new service.
      tags:
        - Services
      operationId: PostService
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceRequest"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceResponse"
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    get:
      summary: Get Services information
      description: Get names and IDs for all services
      tags:
        - Services
      operationId: GetServiceInfo
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Services"
        '401':
          description: Unauthorized
        "500":
          description: Internal Server Error

  /services/{id}:
    put:
      summary: Update a specific service. 
      description: >-
        Update the name and/or the users of this service. 
        If the name, or the userIds are omitted, those will not be updated upon request.
        To remove all users, an empty array must be submitted for userIds.
      tags:
        - Services
      operationId: PutService
      parameters:
        - name: id
          in: path
          description: ID of the service
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceUpdateRequest"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceResponse"
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        '401':
          description: Unauthorized
        '404':
          description: Service does not exist
        '500':
          description: Internal Server Error

  /server:
    get:
      summary: Get DataMeta server information
      description: Get information about the DataMeta server serving this API
      tags:
        - Server
      operationId: GetServerInfo
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerInfoResponse"
        "500":
          description: Internal Server Error

  /registrations:
    post:
      summary: Create a new user registration request
      description: Create a new user registration request
      tags:
        - User
      operationId: PostRegistration
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistrationRequest"
      responses:
        "204":
          description: New User Registration Request created
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "500":
          description: Internal Server Error


  /registrationsettings:
    get:
      summary: Get details for the registration view
      description: Get all available groups and the user agreement for the registration view
      tags:
        - User
      operationId: GetRegistrationSettings
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterSettingsResponse"
        "500":
          description: Internal Server Error

  /appsettings/{id}:
    put:
      summary: Update a specific appsetting. This is an administrative Endpoint that is not accessible for regular users.
      description: >-
        Update a specific appsetting
      tags:
        - Settings
      operationId: UpdateAppSettings
      parameters:
        - name: id
          in: path
          description: ID of the appsetting
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppSettingsUpdateRequest"
      responses:
        "204":
          description: App Settings Updated
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Setting does not exist
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        '500':
          description: Internal Server Error

security:
  - bearerAuth: []
  - cookieAuth: []

components:

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
    cookieAuth:
      type: apiKey
      in: cookie
      name: datameta

  schemas:
    CreateTokenRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        label:
          type: string
        expires:
          type: string
        # email and password are
        # not required when using cookie-based
        # sessions from the front end
      required:
        - label
      additionalProperties: false

    UserSession:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Identifier"
        userId:
          $ref: "#/components/schemas/Identifier"
        token:
          type: string
        label:
          type: string
        expires:
          type: string
          nullable: true
      required:
        - id
        - userId
        - token
        - label
        - expires
      additionalProperties: false

    ApiKeyList:
      type: array
      items:
        type: object
        properties:
          id:
            $ref: "#/components/schemas/Identifier"
          label:
            type: string
          expires:
            type: string
            nullable: True
          hasExpired:
            type: boolean
        required:
          - id
          - label
          - expires
      additionalProperties: false

    PasswordChange:
      type: object
      properties:
        passwordChangeCredential:
          type: string
        newPassword:
          type: string
      required:
        - newPassword
        - passwordChangeCredential
      additionalProperties: false

    MetaDatum:
      type: object
      properties:
        name:
          type: string
        regexDescription:
          type: string
        longDescription:
          type: string
        example:
          type: string
        regExp:
          type: string
        dateTimeFmt:
          type: string
        isMandatory:
          type: boolean
        order:
          type: integer
        isFile:
          type: boolean
        isSubmissionUnique:
          type: boolean
        isSiteUnique:
          type: boolean
        serviceId:
          type: string
          nullable: true
      required:
        - name
        - regexDescription
        - longDescription
        - example
        - regExp
        - dateTimeFmt
        - isMandatory
        - order
        - isFile
        - isSubmissionUnique
        - isSiteUnique
        - serviceId
      additionalProperties: false

    MetaDataSet:
      type: object
      properties:
        record:
          type: object
          additionalProperties: true
          # a free-form object,
          # any property is allowed
      required:
        - record
      additionalProperties: false

    ServiceExecution:
      type: object
      properties:
        record:
          type: object
          additionalProperties: true
          nullable: false
          # a free-form object,
          # any property is allowed
        fileIds:
          type: array
          nullable: false
          items:
            type: string
      required:
        - record
        - fileIds
      additionalProperties: false

    MetaDataSetResponse:
      type: object
      properties:
        record:
          type: object
          additionalProperties: true
          # a free-form object, any property is allowed
        fileIds:
          type: object
          additionalProperties: true
          # a free-form object mapping the field names to file IDs
        serviceExecutions:
          type: object
          # nullable as a whole for responses to users who cannot see service executions
          nullable: true
          additionalProperties:
            # Maps record field names to service executions. The individual
            # fields are also nullable for services that haven't been executed
            # yet.
            $ref: "#/components/schemas/MetaDataSetServiceExecution"
        id:
          $ref: "#/components/schemas/Identifier"
        submissionId:   
          $ref: "#/components/schemas/NullableIdentifier"
        userId:
          $ref: "#/components/schemas/Identifier"
      required:
        - record
      additionalProperties: false

    MetaDataSetServiceExecution:
      type: object
      nullable: true
      properties:
        serviceExecutionId:
          $ref: "#/components/schemas/Identifier"
        executionTime:
          type: string
          format: date-time
        serviceId:
          $ref: "#/components/schemas/Identifier"
        userId:
          $ref: "#/components/schemas/Identifier"

    FileAnnouncement:
      type: object
      properties:
        name:
          type: string
        checksum:
          type: string
      required:
        - name
        - checksum
      additionalProperties: false

    FileUploadResponse:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Identifier"
        name:
          type: string
        urlToUpload:
          type: string
        requestHeaders:
          type: object
          additionalProperties: true
        userId:
          $ref: "#/components/schemas/Identifier"
        expires:
          type: string
      required:
        - name
        - id
        - urlToUpload
        - userId
        - expires
      additionalProperties: false

    FileResponse:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Identifier"
        name:
          type: string
        contentUploaded:
          type: boolean
          nullable: true
        checksum:
          type: string
        filesize:
          type: integer
          nullable: true
        userId:
          $ref: "#/components/schemas/Identifier"
        expires:
          type: string
          nullable: true
      required:
        - name
        - id
        - contentUploaded
        - checksum
        - userId
        - expires
      additionalProperties: false

    FileUpdateRequest:
      type: object
      properties:
        name:
          type: string
        contentUploaded:
          type: boolean
        checksum:
          type: string
      additionalProperties: false

    ServiceRequest:
      type: object
      properties:
        name:
          type: string
      required:
        - name
      additionalProperties: false

    ServiceUpdateRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
        userIds:
          type: array
          nullable: true
          items:
            type: string
      additionalProperties: false

    Services:
      type: array
      items:
        $ref: "#/components/schemas/ServiceResponse"

    ServiceResponse:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Identifier"
        name:
          type: string
        userIds:
          type: array
          items:
            $ref: "#/components/schemas/Identifier"
      required:
        - id
        - name
        - userIds
      additionalProperties: false

    StagedFiles:
      type: object
      properties:
        fileIds:
          type: array
          items:
            type: string
      required:
        - fileIds
      additionalProperties: false

    StagedMetaDataSets:
      type: object
      properties:
        metadatasetIds:
          type: array
          items:
            type: string
      required:
        - metadatasetIds
      additionalProperties: false

    SubmissionRequest:
      type: object
      properties:
        metadatasetIds:
          type: array
          items:
            type: string
        fileIds:
          type: array
          items:
            type: string
        label:
          type: string
          nullable: true
      required:
        - metadatasetIds
        - fileIds
      additionalProperties: false

    SubmissionResponse:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Identifier"
        label:
          type: string
          nullable: true
        metadatasetIds:
          type: array
          items:
            $ref: "#/components/schemas/Identifier"
        fileIds:
          type: array
          items: 
            $ref: "#/components/schemas/Identifier"
      required:
        - id
        - metadatasetIds
        - fileIds
      additionalProperties: false

    GroupSubmissions:
      type: array
      items:
        $ref: "#/components/schemas/SubmissionResponse"

    GroupUpdateRequest:
      type: object
      properties:
        name:
          type: string
      required:
        - name
      additionalProperties: false

    UserResponse:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Identifier"
        name:
          type: string
        groupAdmin:
          type: boolean
        siteAdmin:
          type: boolean
        siteRead:
          type: boolean
        email:
          type: string
        group:
          type: object
          properties:
            id:
              $ref: "#/components/schemas/Identifier"
            name:
              type: string
      required:
        - id
        - name
        - groupAdmin
        - siteAdmin
        - siteRead
        - email
        - group
      additionalProperties: false

    UserUpdateRequest:
      type: object
      properties:
        name:
          type: string
        groupId:
          type: string
        groupAdmin:
          type: boolean
        siteAdmin:
          type: boolean
        siteRead:
          type: boolean
        enabled:
          type: boolean

    MetaDataResponse:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Identifier"
        name:
          type: string
        regexDescription:
          type: string
          nullable: true
        longDescription:
          type: string
          nullable: true
        example:
          type: string
          nullable: true
        regExp:
          type: string
          nullable: true
        dateTimeFmt:
          type: string
          nullable: true
        isMandatory:
          type: boolean
        order:
          type: integer
        isFile:
          type: boolean
        isSubmissionUnique:
          type: boolean
        isSiteUnique:
          type: boolean
        serviceId:
          $ref: "#/components/schemas/NullableIdentifier"
      required:
        - id
        - name
        - regexDescription
        - longDescription
        - example
        - regExp
        - dateTimeFmt
        - isMandatory
        - order
        - isFile
        - isSubmissionUnique
        - isSiteUnique
        - serviceId
      additionalProperties: false

    MetaDatumResponse:
      type: array
      items:
        $ref: "#/components/schemas/MetaDataResponse"

    ServerInfoResponse:
      type: object
      properties:
        apiVersion:
          type: string
        datametaVersion:
          type: string
      required:
        - apiVersion
        - datametaVersion
      additionalProperties: false

    RegistrationRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        org_select:
          type: string
          nullable: true
        org_create:
          type: string
          nullable: true
        org_new_name:
          type: string
          nullable: true
        check_user_agreement:
          type: boolean
          nullable: true
      required:
        - name
        - email
        - org_select
        - org_create
        - org_new_name
        - check_user_agreement
      additionalProperties: false

    RegisterSettingsResponse:
      type: object
      properties:
        userAgreement:
          type: string
          nullable: True
        groups:
          type: array
          items:
            type: object
            properties:
              id:
                $ref: "#/components/schemas/Identifier"
              name:
                type: string
      required:
        - groups
        - userAgreement
      additionalProperties: false      

    AppSettingsResponse:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Identifier"
        key:
          type: string
        valueType:
          type: string
        value:
          type: string
      required:
        - id
        - key
        - valueType
        - value
      additionalProperties: false

    AppSettingsUpdateRequest:
      type: object
      properties:
        value:
          type: string
      required:
        - value
      additionalProperties: false

    Identifier:
      type: object
      properties:
        uuid:
          type: string
        site:
          type: string
      required:
        - uuid
      additionalProperties: false

    NullableIdentifier:
      type: object
      nullable: true
      properties:
        uuid:
          type: string
        site:
          type: string
      required:
        - uuid
      additionalProperties: false

    Error:
      type: object
      properties:
        exception:
          type: string
        error_code:
          type: string
        message:
          type: string
        entity:
          $ref: "#/components/schemas/Identifier"
        field:
          type: string
      required:
        - message
      additionalProperties: false

    ErrorModel:
      type: array
      items:
       $ref: "#/components/schemas/Error"
