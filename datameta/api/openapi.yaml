# Copyright (c) 2021 Universität Tübingen, Germany
# Authors: Leon Kuchenbecker <leon.kuchenbecker@uni-tuebingen.de>,
#          Kersten Breuer <k.breuer@dkfz.de>
#          Moritz Hahn <moritz.hahn@uni-tuebingen.de>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

openapi: 3.0.0
info:
  description: DataMeta
  version: 0.3.0
  title: DataMeta

servers:
  - url: /api/v0

paths:

  /keys:
    post:
      summary: Create new API Key/Token
      description: Create new API Key/Token
      tags:
        - Authentication and Users
      operationId: CreateApiKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTokenRequest"
        description: >-
          Credentials to use (optional when using cookie sessions),
          a label for the ApiKey to be created and the date it expires.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSession"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []
        - cookieAuth: []
        - {}

  /keys/{id}:
    delete:
      summary: Delete ApiKey by label
      description: >-
        Delete ApiKey by label.
      tags:
        - Authentication and Users
      operationId: DeleteApiKey
      parameters:
        - name: id
          in: path
          description: ID (not label) of Apikey
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          description: Internal Server Error

  /users/{id}/keys:
    get:
      summary: All API keys for a user
      description: >-
        Get a list of all API keys for a user.
        Please note that you cannot retrieve
        the tokens themselves because they are
        stored in a hashed format in our database
        as only the respective user is allowed
        to know them.
      tags:
        - Authentication and Users
      operationId: GetUserApiKeys
      parameters:
        - name: id
          in: path
          description: ID of the User
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKeyList"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          description: Internal Server Error

  /users/{id}/password:
    put:
      summary: Update a user's password
      description: Update a user's password. The user ID can be specified either as a UUID or as a site ID.
      tags:
        - Authentication and Users
      operationId: SetUserPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordChange"
        description: Old and new password
      parameters:
        - name: id
          in: path
          description: User ID, either as UUID or as site ID. '0' for password reset token based access.
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
        - cookieAuth: []
        - {} # Unauthenticated access for use with reset token
      responses:
        "204":
          description: Password update successful
        "401":
          description: Unauthorized
        "403":
          description: The specified user does not exist or is not the same user as the authorized user.
        "404":
          description: Password reset token not found
        "410":
          description: Password reset token expired
        "400":
          $ref: '#/components/responses/ValidationError'
        "500":
          description: Internal Server Error

  /users/{id}:
    put:
      summary: Update a user's credentials and status
      description: Update a user's name, group, admin status and enabled status.
      tags:
        - Authentication and Users
      operationId: UserUpdateRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
        description: username, group, admin status and enabled status
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        "204":
          description: User update successful
        "401":
          description: Unauthorized
        "403":
          description: The specified user does not exist or this user does not have the rights to perform this action.
        "400":
          $ref: '#/components/responses/ValidationError'
        "500":
          description: Internal Server Error


  /metadatasets:
    post:
      summary: Create a New MetaDataSet
      description: >-
        Create a new MetaDataSet
      tags:
        - Metadata
      operationId: CreateMetaDataSet
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetaDataSet"
        description: >-
          Provide all properties for one MetaDataSet.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetaDataSetResponse"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          description: Internal Server Error


  /metadatasets/{id}:
    get:
      summary: Get Details for a MetaDataSet
      description: >-
        Get details for a metadataset.
      tags:
        - Metadata
      operationId: GetMetaDataSet
      parameters:
        - name: id
          in: path
          description: ID of the MetaDataSet
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetaDataSetResponse"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Not-Submitted Metadataset
      description: >-
        Delete File. Please note:
        This is only allowed if the metadataset
        has not been part of a Submission, yet.
      tags:
        - Metadata
      operationId: DeleteMetadataSet
      parameters:
        - name: id
          in: path
          description: ID of the Metadataset
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deletion successful
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: File not found
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          description: Internal Server Error

  /files:
    post:
      summary: Create a New File
      description: >-
        Creates a new empty file object.
        Attention: this endpoint does not
        take the file content for upload.
        Instead, it will respond with a
        presigned URL which you can use to
        upload (PUT) your file content.
      tags:
        - Files
      operationId: CreateFile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FileAnnouncement"
        description: >-
          Provide essential properties of the file that
          shall be uploaded
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileUploadResponse"
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          description: Internal Server Error

  /files/{id}:
    get:
      summary: Get Details for A File
      description: >-
        Get details for a file.
      tags:
        - Files
      operationId: GetFile
      parameters:
        - name: id
          in: path
          description: ID of the File
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileResponse"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: File not found
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          description: Internal Server Error
    put:
      summary: Update File Details
      description: >-
        Update details for a File.
        E.g. to indicate that the File content
        has been uploaded (set contentUploaded=true).
        Please note: this only works for Files that
        have not been submitted, yet. Other file
        attributes (checksum and name) can only be
        updated until contentUploaded has been set to
        'true'.
      tags:
        - Files
      operationId: UpdateFile
      parameters:
        - name: id
          in: path
          description: ID of the File
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FileUpdateRequest"
        description: >-
          Provide properties of the file that
          shall be updated.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileResponse"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '409':
          description: Mismatch between uploaded data checksum and announced checksum
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          description: Internal Server Error
    delete:
      summary: Delete Not-Submitted File
      description: >-
        Delete File. Please note:
        This is only allowed if the File
        has not been part of a Submission, yet.
      tags:
        - Files
      operationId: DeleteFile
      parameters:
        - name: id
          in: path
          description: ID of the File
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deletion successful
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: File not found
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          description: Internal Server Error

  /submissions:
    post:
      summary: Create a New Submission
      description: >-
        Creates a new Submission.
        A submission consists of a list of
        metadatasets and a list of files.
      tags:
        - Submissions
      operationId: CreateSubmission
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmissionRequest"
        description: >-
          Provide a list of metadatasets and a list of files.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubmissionResponse"
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error

  /presubvalidation:
    post:
      summary: Pre-validate a submission
      description: >-
        Pre-validates a submission request without actually creating a
        submission.  A submission request consists of a list of metadatasets
        and a list of files.
      tags:
        - Submissions
      operationId: PrevalidateSubmission
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmissionRequest"
        description: >-
          Provide a list of metadatasets and a list of files.
      responses:
        '204':
          description: OK
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          description: Internal Server Error

  /groups/{id}/submissions:
    get:
      summary: Get A List of All Submissions of A Group.
      description: >-
        Get a list of all submissions of a group.
      tags:
        - Submissions
        - Groups
      operationId: GetGroupSubmissions
      parameters:
        - name: id
          in: path
          description: ID of the group
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GroupSubmissions"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          description: Internal Server Error

  /groups/{id}:
    put:
      summary: Change the name of a group.
      description: >-
        Change the name of a group.
      tags:
        - Groups
      operationId: ChangeGroupName
      parameters:
        - name: id
          in: path
          description: ID of the group
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupUpdateRequest"
      responses:
        "204":
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          description: Internal Server Error

security:
  - bearerAuth: []
  - cookieAuth: []


components:

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
    cookieAuth:
      type: apiKey
      in: cookie
      name: datameta

  schemas:
    CreateTokenRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        label:
          type: string
        expires:
          type: string
        # email and password are
        # not required when using cookie-based
        # sessions from the front end
      required:
        - label
      additionalProperties: false

    UserSession:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Identifier"
        userId:
          $ref: "#/components/schemas/Identifier"
        token:
          type: string
        label:
          type: string
        expires:
          type: string
          nullable: true
      required:
        - id
        - userId
        - token
        - label
        - expires
      additionalProperties: false

    ApiKeyList:
      type: array
      items:
        type: object
        properties:
          id:
            $ref: "#/components/schemas/Identifier"
          label:
            type: string
          expires:
            type: string
            nullable: True
          hasExpired:
            type: boolean
        required:
          - id
          - label
          - expires
      additionalProperties: false

    PasswordChange:
      type: object
      properties:
        passwordChangeCredential:
          type: string
        newPassword:
          type: string
      required:
        - newPassword
        - passwordChangeCredential
      additionalProperties: false

    MetaDataSet:
      type: object
      properties:
        record:
          type: object
          additionalProperties: true
          # a free-form object,
          # any property is allowed
      required:
        - record
      additionalProperties: false

    MetaDataSetResponse:
      type: object
      properties:
        record:
          type: object
          additionalProperties: true
          # a free-form object,
          # any property is allowed
        id:
          $ref: "#/components/schemas/Identifier"
        submissionId:
          type: string
          nullable: true
        groupId:
          $ref: "#/components/schemas/Identifier"
        userId:
          $ref: "#/components/schemas/Identifier"
      required:
        - record
      additionalProperties: false

    FileAnnouncement:
      type: object
      properties:
        name:
          type: string
        checksum:
          type: string
      required:
        - name
        - checksum
      additionalProperties: false

    FileUploadResponse:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Identifier"
        name:
          type: string
        urlToUpload:
          type: string
        requestHeaders:
          type: object
          additionalProperties: true
        userId:
          $ref: "#/components/schemas/Identifier"
        groupId:
          $ref: "#/components/schemas/Identifier"
        expires:
          type: string
      required:
        - name
        - id
        - urlToUpload
        - userId
        - groupId
        - expires
      additionalProperties: false

    FileResponse:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Identifier"
        name:
          type: string
        contentUploaded:
          type: boolean
          nullable: true
        checksum:
          type: string
        filesize:
          type: integer
          nullable: true
        userId:
          $ref: "#/components/schemas/Identifier"
        groupId:
          $ref: "#/components/schemas/Identifier"
        expires:
          type: string
      required:
        - name
        - id
        - contentUploaded
        - checksum
        - userId
        - groupId
        - expires
      additionalProperties: false

    FileUpdateRequest:
      type: object
      properties:
        name:
          type: string
        contentUploaded:
          type: boolean
        checksum:
          type: string
      additionalProperties: false

    SubmissionRequest:
      type: object
      properties:
        metadatasetIds:
          type: array
          items:
            type: string
        fileIds:
          type: array
          items:
            type: string
        label:
          type: string
          nullable: true
      required:
        - metadatasetIds
        - fileIds
      additionalProperties: false

    SubmissionResponse:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Identifier"
        label:
          type: string
          nullable: true
        metadatasetIds:
          type: array
          items:
            $ref: "#/components/schemas/Identifier"
        fileIds:
          type: array
          items: 
            $ref: "#/components/schemas/Identifier"
      required:
        - id
        - metadatasetIds
        - fileIds
      additionalProperties: false

    GroupSubmissions:
      type: array
      items:
        $ref: "#/components/schemas/SubmissionResponse"

    GroupUpdateRequest:
      type: object
      properties:
        name:
          type: string
      required:
        - name
      additionalProperties: false

    UserUpdateRequest:
      type: object
      properties:
        name:
          type: string
        groupId:
          type: string
        groupAdmin:
          type: boolean
        siteAdmin:
          type: boolean
        enabled:
          type: boolean
      additionalProperties: false

    Identifier:
      type: object
      properties:
        uuid:
          type: string
        site:
          type: string
      required:
        - uuid
      additionalProperties: false

    Error:
      type: object
      properties:
        exception:
          type: string
        error_code:
          type: string
        message:
          type: string
        entity:
          $ref: "#/components/schemas/Identifier"
        field:
          type: string
      required:
        - message
      additionalProperties: false

    ValidationErrorModel:
      type: array
      items:
        $ref: "#/components/schemas/Error"

  responses:
    ValidationError:
      description: Validation Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationErrorModel"
