
<metal:block use-macro="load: layout.pt">

<metal:block fill-slot="content">
<div class="row">
    <div class="uplcontainer col-6 p-0">
        <div class="box" id="form_samplesheets">
            <div class="box__input">
                <i class="bi bi-file-earmark-spreadsheet box__icon" style="font-size:60px;"></i>
                <label for="file"><span class="box__dragndrop">Drag sample sheets here</span>.</label>
                <button type="submit" class="box__button">Upload</button>
            </div>
            <div class="box__uploading">Uploading&hellip;</div>
        </div>
    </div>
    <div class="uplcontainer col-6 p-0">
        <div class="box" id="form_data">
            <div class="box__input">
                <div class="box__icon" style="font-size:60px">
                    <i class="bi bi-file-binary"></i>
                    <i class="bi bi-file-binary"></i>
                    <i class="bi bi-file-binary"></i>...
                </div>
                <label for="file"><span class="box__dragndrop">Drag data files here</span>.</label>
                <button type="submit" class="box__button">Upload</button>
            </div>
            <div class="box__uploading">Uploading&hellip;</div>
        </div>
    </div>
</div>
<div id="div_alerts" class="row mt-2">
</div>
<div id="row_annotated" class="row" style="display:none">
    <div class="card col-12">
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-10">
                    <h5 class="card-title">Pending annotated submissions</h5>
                    <p class="card-text">The following metadata and files have
                    been uploaded. Records shown in green are ready to
                    commit!</p>
                </div>
                <div class="col-2">
                    <a id="commit_btn" class="btn btn-outline-success w-100" href="#">Commit</a>
                </div>
            </div>
            <table class="table table-sm">
                <thead>
                    <tr id="thr_annotated">
                    </tr>
                </thead>
                <tbody id="tbody_annotated">
                </tbody>
            </table>
            <span class="me-2"><i class="bi bi-check-circle-fill text-success"></i> Ready to commit</span>
            <span class="me-2"><i class="bi bi-exclamation-diamond-fill text-warning"></i> Faulty record</span>
            <span class="me-2"><i class="bi bi-hdd-rack-fill text-danger"></i> Waiting for file</span>
            <span class="me-2"><i class="bi bi-hdd-rack-fill text-success"></i> File received</span>
        </div>
    </div>
</div>
<div id="row_unannotated" class="row mt-2" style="display:none">
    <div class="card col-12">
        <div class="card-body">
            <h5 class="card-title">Pending un-annotated submissions</h5>
            <p class="card-text">The following files have been uploaded but not yet annotated:</p>
            <table id="table_unannotated" class="table table-sm">
                <thead>
                    <tr>
                        <th scope="col">Filename</th>
                        <th scope="col">Size</th>
                        <th scope="col">MD5 Checksum</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody id="tbody_unannotated">
                </tbody>
            </table>
        </div>
    </div>
</div>
<div id="row_delete_pending" class="row mt-2" style="display:none">
    <a id="del_pending_btn" class="btn btn-outline-danger w-100" href="#">Delete all pending data</a>
</div>
</metal:block>


<metal:block fill-slot="head">
<link href="/static/css/fileupload.css" rel="stylesheet">
</metal:block>

<metal:block fill-slot="body">
<script>
"use strict";

DataMeta.new_alert = function(message, color) {
        var alerts = document.getElementById("div_alerts");
        var div    = document.createElement("div");
        div.classList = "mb-2 alert alert-" + color + " alert-dismissible fade show";
        div.setAttribute("role", "alert");
        div.innerHTML = message;
        var button = document.createElement("button");
        button.classList = "btn-close";
        button.setAttribute("type", "button"); button.setAttribute("data-bs-dismiss", "alert");
        button.setAttribute("aria-label", "Close");
        div.appendChild(button);
        alerts.appendChild(div);
}

DataMeta.show_unannotated = function(value) {
    var row_unannotated = document.getElementById("row_unannotated");
    var row_delete_pending = document.getElementById("row_delete_pending");
    row_unannotated.style.display = value ? "block" : "none";
    row_delete_pending.style.display = "block";
}

DataMeta.show_annotated = function(value) {
    var row_annotated = document.getElementById("row_annotated");
    var row_delete_pending = document.getElementById("row_delete_pending");
    row_annotated.style.display = value ? "block" : "none";
    row_delete_pending.style.display = "block";
}

DataMeta.set_progress_bar = function(filename, val, init_only) {
    /* Is this file already somewhere on the screen? */
    var target;
    if (filename in DataMeta.pbar_targets) {
        target = DataMeta.pbar_targets[filename];
    } else {
        /* If not, we add it to the unannotated list preliminarily */
        var tbody = document.getElementById("tbody_unannotated");
        var row = tbody.insertRow(0);
        row.insertCell(0).innerHTML=filename;
        row.insertCell(1);
        var cell = row.insertCell(2);
        target = cell;
        DataMeta.pbar_targets[filename]=target;

        DataMeta.show_unannotated(true);
    }

    if (init_only === true)
        return;

    /* Does the target already run a progress bar? */
    var bar = target.querySelector(".progress-bar");
    if (bar != null) {
        bar.style.width = val + "%";
        bar.setAttribute("aria-valuenow", val.toString());
        return;
    }

    /* Create a progress bar */
    var div = document.createElement("div");
    div.classList = "progress mt-1";
    bar = document.createElement("div");
    bar.classList="progress-bar progress-bar-striped progress-bar-animated";
    bar.setAttribute("role", "progressbar");
    bar.setAttribute("aria-valuenow", val.toString());
    bar.setAttribute("aria-valuemin", "0");
    bar.setAttribute("aria-valuemax", "100");
    bar.setAttribute("style", "width: " + val + "%");
    div.appendChild(bar);
    target.innerHTML ="";
    target.appendChild(div);
}

DataMeta.delete_mdatset = function(id) {
    var xhr = new XMLHttpRequest();

    var data = new FormData();
    data.set("action", "delete_mdatset");
    data.set("mdatset_id", id);

    xhr.onreadystatechange = function(){
        if (xhr.readyState === 4){
            var json = JSON.parse(xhr.responseText);
            DataMeta.submitRefresh();
            if (!json.success) {
                DataMeta.new_alert("<strong>ERROR</strong> Deleting the record failed. Please try again or contact support.", "danger")
            }
        }
    };

    xhr.open('POST', '/submit/action');
    xhr.send(data);
}

DataMeta.delete_file = function(id) {
    var xhr = new XMLHttpRequest();

    var data = new FormData();
    data.set("action", "delete_file");
    data.set("file_id", id);

    xhr.onreadystatechange = function(){
        var error = false;
        if (xhr.readyState === 4){
            if (xhr.status === 200) {
                var json = JSON.parse(xhr.responseText);
                DataMeta.submitRefresh();
                error = !json.success;
            } else error = 1;
            if (error) DataMeta.new_alert("<strong>ERROR</strong> Deleting the file failed. Please try again or contact support.", "danger");
        }
    };

    xhr.open('POST', '/submit/action');
    xhr.send(data);
}

DataMeta.reloadPopovers = function() {
    var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'))
    DataMeta.popoverList = popoverTriggerList.map(function (popoverTriggerEl) {
        return new bootstrap.Popover(popoverTriggerEl)
    })
}

DataMeta.refresh_annotated = function(json_annotated, json_linting) {
    var row_annotated = document.getElementById("row_annotated");
    var trh = document.getElementById("thr_annotated");

    /* Update the client about the configured column names */
    DataMeta.mdat_names = json_annotated.mdat_names;
    DataMeta.mdat_names_files = json_annotated.mdat_names_files;

    /* Rebuild the table header (column names) of the annotated samples table */
    trh.innerHTML = "";
    /* Add the first column for status */
    var child = document.createElement("th");
    child.setAttribute("scope", "col");
    child.innerHTML = "";
    trh.appendChild(child);
    /* Add columns based on the sample sheet configuration */
    DataMeta.mdat_names.forEach(function(colname) {
            var child = document.createElement("th");
            child.setAttribute("scope", "col");
            child.innerHTML = colname;
            trh.appendChild(child);
        });
    /* Add the last column for trash */
    var child = document.createElement("th");
    child.setAttribute("scope", "col");
    child.innerHTML = "";
    trh.appendChild(child);
    /* Fill the annotated samples table */
    var table = document.getElementById("tbody_annotated");
    table.innerHTML="";
    var linted_mset_ids = []

    if (json_annotated.table_data.length==0) {
        DataMeta.show_annotated(false);
    } else {
        DataMeta.show_annotated(true);
    }

    json_annotated.table_data.forEach(function(mdatset, i){
            var mset_id = mdatset['mset_id']
            var rowdata = mdatset['mset_values']
            DataMeta.show_annotated(true);
            var row = table.insertRow(i);

            // Initial cell with status icon
            var cell = row.insertCell(0);
            if (json_linting[mset_id].length==0) {
                cell.innerHTML='<i class="bi bi-check-circle-fill text-success"></i>';
                linted_mset_ids.push(mset_id);
            } else {
                var linting_report = ""
                json_linting[mset_id].forEach(function(linting) {
                    if (linting.type=="nofile")
                        linting_report += "<strong>" + linting.field + "</strong><br>Missing file.<br><br>";
                    else if (linting.type=="custom")
                        linting_report += "<strong>" + linting.field + "</strong><br>" + linting.error + "<br><br>";
                });
                var exp = /"/g;
                linting_report = linting_report.replace(exp, '&quot;')
                    cell.innerHTML='<a tabindex="0" role="button" data-bs-html="true" data-bs-toggle="popover" data-bs-trigger="focus" title="Linting report" data-bs-content="' + linting_report + '"><i class="bi bi-exclamation-diamond-fill text-warning"></i></a>';
            }
            DataMeta.mdat_names.forEach(function(colname, colidx)
            {
                var cell = row.insertCell(colidx+1);
                cell.innerHTML=rowdata[colname];
                if (DataMeta.mdat_names_files.indexOf(colname)!=-1) {
                    DataMeta.pbar_targets[rowdata[colname]] = cell;
                    var missing = false;
                    json_linting[mset_id].forEach(function(linting){
                        // Do we have a missing file?
                        if (linting.type=='nofile' && linting.field==colname){
                            cell.innerHTML = '<i class="bi bi-hdd-rack-fill text-danger"></i> ' + cell.innerHTML;
                            cell.classList.add("fst-italic");
                            missing = true;
                        }
                    });
                    if (!missing) {
                        cell.innerHTML = '<i class="bi bi-hdd-rack-fill text-success"></i> ' + cell.innerHTML;
                    }
                }
            });
            var cell = row.insertCell(DataMeta.mdat_names.length+1);
            cell.innerHTML='<button type="button" class="py-0 px-1 btn btn-sm btn-outline-danger"><i class="bi bi-trash-fill"></i></button>';
            cell.querySelector(".btn").addEventListener("click", function(event) {
	        event.target.disabled = true;
                DataMeta.delete_mdatset(mset_id);
                });
        });
    document.getElementById("commit_btn").setAttribute("data-datameta-mset", JSON.stringify(linted_mset_ids));
    DataMeta.reloadPopovers();
}

DataMeta.refresh_unannotated = function(json) {
    var row_unannotated = document.getElementById("row_unannotated");

    var tbody = document.getElementById("tbody_unannotated");
    tbody.innerHTML="";

    if (json.table_data.length==0) {
        DataMeta.show_unannotated(false);
    } else {
        DataMeta.show_unannotated(true);
    }

    json.table_data.forEach(function(rowdata) {
        var row = tbody.insertRow(-1);
        row.insertCell(0).innerHTML=rowdata.filename;
        row.insertCell(1).innerHTML=rowdata.filesize;
        var cell = row.insertCell(2);
        cell.innerHTML = rowdata.checksum;
        cell.classList = "font-monospace";
        // Store this cell as progress bar target
        DataMeta.pbar_targets[rowdata.filename] = cell;
        // Delete button
        var cell = row.insertCell(3);
        cell.innerHTML='<button type="button" class="py-0 px-1 btn btn-sm btn-outline-danger"><i class="bi bi-trash-fill"></i></button>';
        cell.querySelector(".btn").addEventListener("click", function(event) {
	    event.target.disabled = true;
            DataMeta.delete_file(rowdata.file_id);
            });
    });
}


DataMeta.commit = function(mset_ids) {
    var xhr = new XMLHttpRequest();

    var data = new FormData();
    data.set("action", "commit");
    mset_ids.forEach(function(mset_id) {
        data.append("mset_ids[]", mset_id);
    });

    xhr.onreadystatechange = function(){
        var error = false;
        if (xhr.readyState === 4){
            if (xhr.status === 200) {
                var json = JSON.parse(xhr.responseText);
                DataMeta.submitRefresh();
                error = !json.success;
            } else error = 1;
            if (error) DataMeta.new_alert("<strong>ERROR</strong> " + json.error, "danger");
	    document.getElementById("commit_btn").disabled = false;
        }
    };

    xhr.open('POST', '/submit/action');
    xhr.send(data);
}

/*
Refreshes the data displayed by the `submit` view
*/
DataMeta.submitRefresh = function() {
    var xhr = new XMLHttpRequest();
    xhr.onreadystatechange = function(){
        if (xhr.readyState === 4){
            var json = JSON.parse(xhr.responseText);
            /* The two refresh functions will point to progress bar target elements in here */
            DataMeta.pbar_targets = {};
            DataMeta.refresh_annotated(json.annotated, json.linting);
            DataMeta.refresh_unannotated(json.unannotated);
        }
    };

    xhr.open('GET', '/submit/view.json');
    xhr.send();
}

DataMeta.delete_pending = function() {
    var xhr = new XMLHttpRequest();

    var data = new FormData();
    data.set("action", "delete_pending");

    xhr.onreadystatechange = function(){
        var error = false;
        if (xhr.readyState === 4){
            if (xhr.status === 200) {
                var json = JSON.parse(xhr.responseText);
                error = !json.success;
            } else error = 1;
            if (error) DataMeta.new_alert("Deletion failed. Please try again.", "danger");
            DataMeta.submitRefresh();
            document.getElementById("del_pending_btn").disabled = false;
        }
    };

    xhr.open('POST', '/submit/action');
    xhr.send(data);
}

window.addEventListener("load", function() {
    DataMeta.submitRefresh();

    document.getElementById("commit_btn").addEventListener("click", function(event) {
            event.target.disabled = true;
            DataMeta.commit(JSON.parse(event.target.getAttribute("data-datameta-mset")));
        });
    document.getElementById("del_pending_btn").addEventListener("click", function(event) {
            event.target.disabled = true;
            DataMeta.delete_pending();
        });
});
</script>
<script src="/static/js/fileupload.js"></script>
</metal:block>
</metal:block>

